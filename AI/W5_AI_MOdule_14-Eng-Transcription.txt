Welcome back friends! We are into fourteenth module now and we’ll be discussing about… we’ll… we’ll continue discussing about A star. We’ll talk about admissibility of A star and then there are two extensions we’ll be talking about one is called agenda driven system and the other is called and or graphs. In the admissibility we have already seen that if the algorithm uses a heuristic function which is admissible, the algorithm itself becomes admissible that means, it's… it’s guaranteed to give us an optimal solution. So, we'll be talking about that admissibility first and we have already seen that H dash is an estimate. So if that estimate is consistently underestimate the actual value it… the heuristic function is said to be admissible. So that's the first thing that we are going to see in this particular module and we are going to look at both components G and H dash, how and when will you vary their value and what is the effect on… on the search process if you vary those. So that's what we are going to talk about and we are in the end we’ll be discussing about agendas and or graphs. 

We’ll begin with admissibility okay the admissibility is a characteristic of an algorithm to find an optimal solution. If A star is optimal, the solution is optimal. It does not exist any path which has lesser cost than what we propose. Okay, so we... we guarantee that the path that we provide is least cost or the… the best path and we have already said if A star heuristic is admissible, then the A star is admissible. In fact, there are other few other things. In fact, I'm not talking about the complete case, but this is generally the case. I'm avoiding some discussion which required some mathematical points to be discussed. I would like to avoid. So I am not going to discuss that. But what does that mean? The admissible point is for all X belongs to that number of nodes, the heuristic value the H dash X is always less than or equal to H dash. For all values of X, if H dash X is less than H X, we call the H to be an optimal function. 

Now, let us try to see if what if H dash overestimates H. Now I have a slide, again slide animation on PPT. So you can run that PPT and see. So, A has two children C and B. C is seven plus one. Now when I say seven plus one or seven comma one sometimes one is G one is H. Now looking at the context you can decide what is G what is H. In this case I have purposefully reversed the order. Seven is H and one is G. So sometimes it is done this way so that's why I've done this, okay. So which is better? Obviously B is better because five plus one six hops away. In fact, C is a shorter route. We are overestimating, we say that seven but it is nearer and B is when we say B, B is five, actually it is nearer. So when we explore B it has only one child called D and it says that it is four hops away. Now we are all adding G okay. So we are all… adding one, so four plus two six. Then E is three plus three and then… so… you… you we are not actually… we are… we say that it is three hoops away, but the next one is the solution called G. We reached there.  

Now you can see that at any point of time when we explore B it is six compared to seven it is eight. So it is B is better and we explore D it is six compared to C eight, it was better. When we explored E is three plus three was six, which again was better to C. And we have got a child called G whatever the value is, we have got through that using a longer path. In fact, C says that G is seven hops away. Actually it’s only one hop away. So that overestimation costed us. So, we got the solution, but not the optimal solution. That's a problem. What if there is an underestimation? Now, let us try to see a similar case. We start from A we had two children B and C. B is one, four C is one, five. Obviously B is better. So we explore we have a D okay. So that D is two, four now you can see that the we are underestimating… in the beginning it says that four hops away but after one hop it still says four hops away. Obviously, our estimation is underestimating the actual value. So, it is two, four… three, four. We are not improving our estimate. Every time we move ahead, we find that it is further than we expected. At this point of time four plus three becomes seven and what we do is we explore C now. It says two, four now we're improving two, four is same as six. So we explore it further three, three, which is again better than E and J which is again better and we reach to N which is again, you can see that G value is increasing the H dash value is decreasing. The total is remaining the same [Indiscernible: 4:57] K which is seven which is same as E okay. So, we prefer K. One of them is to be preferred, so… so we prefer K and we get G.

Now what happened here actually. Though B… we chose a wrong path in the beginning because we are underestimating what happens is at some or the other point of time, our total value when we are consistently underestimating, the next node’s value will always increase. So before we reach to the final node, we’ll be able to find at some point of time that the value is increasing compared to the right path. In this case AC was the right path but we chose AB which was because it looks better because we are underestimating while we travel forward and reach E by the time we realized that path to C is better and then we started traveling and we have seen that that path look consistently promising compared to B and we get to the right solution. 

What if one of the node has more value than eight? We’ll explore we would have explored E again and because it is longer obviously at some or the other point of time before we reach G, that value will become higher and we’ll again start processing from the right path. Now though this sounds simple… it is definitely simple but it is very, very interesting also because the simple prerequisite makes this acceptable and it makes the algorithm admissible. That means, once we do this we are guaranteed to get the optimal solution okay. Looking at… if we explore this further you can see that H and O okay, H will be seven and O will be eight, you can see that was that path was longer actually longer. So even if we have got some other value which is more, you can see that you… you we would have come back to E and traversed H and O, we probably got eight and again gone back to the previous node okay so previous the best path. So we made it to switch over from one path to the other but we’ll always get the best path okay, and that's the power of underestimation. 

Let us take one example of a puzzle called egg puzzle now that probably that this puzzle is… you probably have seen that puzzle a few times. Now the left hand side is the initial state, the right hand side is the final state. They look quite similar, apart from two tiles, okay. Instead of six, we have eight instead of eight, we have three tiles, instead of five we have seven. You can see that there are three tiles which are at the incorrect position, the rest are there. Now the problem is that from the initial state you will have to reach to the final state. Okay, so from one two three four six eight five seven, you would like to reach to one two three four five six seven eight that's what you want. Now, how do you do it? You define rules. We've already seen some other cases before. I'm not going to define rules right now. You may take that thing as an exercise because there are only four rules to be defined… tile moving up, tile moving down, tile moving left and right. So four rules are to be written. So once you write… and in fact, you don't need to move in tile. There's only one thing which moves in true sense, is the empty space. There's only one empty space that is moving and other tiles move accordingly. 

So, if you write just that rule you can continue. Okay, that's the hint. Now, you choose a heuristic number of tiles, which are out of place. Now, in the previous that thing, you know that there are three tiles which are out of place. But then how many moves you need to reach to a place? If it is possible, then you only need to move three tiles to reach to a final? In this case, it is not. But the minimum value is three, maximum value is much more. So number of tiles that you need to their out of [Indiscernible: 8:35] is an excellent admissible heuristic. What does that mean? That is the minimum value and the actual value is almost always going to be higher than that. So, we are underestimating. So this is an example of admissible heuristic function. In the final node you can see that there is one more thing and earlier we used to say that we’ll… we’ll get a heuristic value which is better than others. Here we are actually going in the other direction. In the final case, there is no tile which is out of place so that is value zero and that is what we like to achieve. 

So, we want to achieve heuristic value to be zero. So, that is the difference. And we always start with the heuristic value which is positive. So, what we want to do is to go down from any… some positive value to zero. But is this a good heuristic function? It is admissible. So, if you use this function and use this to traverse the search space generated for this puzzle, you’re guaranteed to get an optimal solution. But this thing again, is it an optimal solution? Is it… is it the best heuristic function? Remember our discussion about local and global heuristic function. This function however good it looks like is a local heuristic function, does not describe the entire situation and that's why it is not very good. Okay. Let us look at the example shown in the handout as well as this thing.

Okay there is one case - one two three seven four five eight six. Now this is a very typical case where we need to reach to this one two three four five six seven eight case. Now there are… you can see that there are three children, okay. One which moves one down, the other one moves seven here and the third one moves five up. Okay so there are three moves possible and that's why there are three children. If you apply heuristic number of tiles out of place, right most state one two three seven space four five eight six seems great because only four tiles are out of place. So okay and second one also is four. So we assume that that is good and we explore. Now you can see that we are actually using best first right now. But if you choose the best, you actually will choose either the second or the third one. But you can see that admissibility the… the second child will have one if you pick up either of them because they are four. So you pick up second or third children. If you pick up the second children, what you get is one child with heuristic value is three. So, you proceed further. 

And you… you get something okay. If you… if you traverse right and you get three and four you can see that we are working haphazardly. There is… there is, we are not leading anywhere. If you… if you just look at this, we're not leading anywhere we are exploring, but we are not getting anywhere. Obviously, the path that that heuristic that we are using is not very good, though it is admissible, it is not very good. It is not leading us to any solution. Okay, you may be interested in finding out what's the better heuristic for this particular case? What is the… the… the global heuristic for this case? One good case, one good solution is provided by a book by Nelson and Nelson. I'm not going to talk about that because this again requires a lot of explanation but it is possible to have a global heuristic function. 

The point here is that an admissible function may not be a very good function. So that is the other problem. So what you need to do if the… if you find that admissible function is not very good? The very theorem which says that when the heuristic function is admissible, we get an optimal solution has a corollary which is described in the slide next. It says that if H dash rarely overestimates H by a small margin delta, it not consistently underestimating. Sometimes its overestimate by… by some very small value delta then you can still get a solution which is far from delta from the optimal solution. Okay, so it is rarely different. It’s maximum amount of delta in rare case, okay. So what does that mean? We get a suboptimal solution, but good enough. Remember human are really good in finding solutions. But many a times they don't find optimal solutions but they don't need optimal solutions. I gave few examples like suppose if I want to go to a restaurant, I won't pick up the best restaurant in the world best restaurant of Ahmedabad. I'll just pick up I say that where I can find good Punjabi food I'll go and that that's the only requirement. I'm not going to go for the best restaurant which can give me the best food.

Okay point is, I'm happy with suboptimal solution. Okay. We'll just have minimal set of constraints satisfied I'm happy. The same thing is here. So, we… we will though this is great the optimal solution we get an admissible heuristic function which is good enough and that’s best we’ll get an optimal solution. But an alternate way in general case is to get a suboptimal solution using a better heuristic function which can yield results better, faster and without much of a trouble. Let it be little suboptimal, not all that admissible. It overestimates sometimes the… the heuristic function that you use it overestimating it by a rare margin is just fine. What is the impact of G? The impact of G is… is… is it. Remember the cla… the case that we have taken in the previous module if you just use one, we’ll just continue incrementing. If you use actual value it’s little more fluctuating? It's just one dimension. If you keep G as zero what do you it's basically a best first search algorithm. 

It says that how far the goal is from the current node and you just choose the best node which is nearest to the goal node. Now you may pick up G as zero when you want that way. For example in networking there is something called anycasting, IP version six, which is the latest IP solution, implements this thing, anycasting. In this anycasting, what they do is they… they send a request to multiple servers and any one of the servers should respond back. Now if you're using this you were just interested in finding a server. Now from this node, whoever is nearer should respond me back. I'm not bothered how far I am from the server, the client node because that doesn't make any sense okay in this case. I want the quickest answer back. The similar case is when while the… the vehicle is traveling. For example, I'm driving a car and I…I…I from A I reach to B then C, then D. Now when I reach D, it says that find the path from A to Z is better.

Now I… I don't want to go back to A and then start traversing again. It’ll add a lot of additional delay. I want to find out best path from D only. Okay, I have talked about a lot of cases where we want to have optimal path from one A…A node A to B and I talked about alternate routes and switching over and all that. You may be surprised that am I contradicting with myself. I'm not. Please understand there are two different cases. case number one is about planning. I'm still at A and I'm finding out the best route to Z okay. There are two different cases one is where I'm A I'm still at A and I'm trying to find out the best route to Z. I’m planning I have not started traveling. I can actually decide any path and I can always backtrack to any previous node because I'm… I'm not actually traveling. I'm just planning. So A to B, B to C and C to D and then come back and then start A to some other path, absolutely fine. When I'm actually traveling, I can't keep the G value as other than zero. Okay, so there are two things. So, if I'm… I have… I'm planning I can keep G value as actual value. But I’m traveling actually traveling. The best answer best method is to keep G as zero and then estimate how far is the goal node from the current role okay. So that's important. So G value is kept as zero in this case.

Anycasting I’ve already talked about is G is one is also quite useful for cases like travel… the routing. If you know bit about networking, every router is connected to every other router in this world by some links and a router to rou… router link is usually denoted as one hop in routing table and there is never using other methods okay. Sometimes it uses but in most cases a router to router connection is considered to be one hope and it is quite surprising. Sometimes router which are part of the same building and sometimes routers are connected to a router across the continent via satellite, the links are considered to be same. So in that case keeping G as one can be a good solution. But in most other real-world cases G value should accepted, used as the real value. And in real world case, sometimes it's very challenging also to choose the right value of G. For example, city in case of city between any two nodes, if you pick up G as the time to travel, or the distance or the traffic, the amount of traffic or even and…and using which you calculate that G value. Remember this G value also is going to get dynamic in case of city because, for example, in the afternoon the road is pretty empty and traffic jam is almost nonexistent. But at the time of office hours rush hours, it’s going to be very different. So G value also is getting dynamic. So in true real-world cases, there are multiple options available for G. And that also might vary over a period of time. 

So point is, in case of real-world situation G, calculation of G can itself be a challenging issue. What's the impact of H dash? If H dash is a very good estimate okay, so if H dash says that the goal node is five hops away and it is actually five hops away. When H dash says that the goal node is twenty hops away and is actually twenty hops away is great. In fact, in that case we are… we are not searching actually we are just finding our path. We don't need to look at alternate path because every time a node which says that I'm the short I have the shortest path it has the shortest path, we don't need to look at any other children. So that is the best solution but that hardly is the case in real world. What if the H dash value is zero? When the H dash value is zero we're just looking at the value of G, the total amount of distance that we have traveled and if G is one, it is basically a breadth first search because you start with the root node you traverse to all children, they're all at one. Now that is breadth first search and then level two then level three they’re all… this is an exact example of a breadth first search. So if you say G is equal to one H dash equal to zero is breadth first search. If G value is actual then it is different, little different breadth first but it is quite near to it. 

When G is also H dash is also zero, what is it? You just because G plus H dash everywhere is zero. So, you can pick up any node and explore. Remember this is something we have already seen this is called generate and test. You just pick up a node from the search space at random check if it is a solution if it is so quit otherwise not. So that is the thing the G plus H dash case which is zero then nothing is to be done. One more point is how the A star testing can be implemented. There are many ways in fact Java C++ are popularly used, but Python is improving in fact. Lot of people try using Python to implement this thing A star. 

Now so far so good A star is an excellent algorithm and used but then there is a catch. If there is a node which has more than one parent, does it make any difference here? In A star there is no difference. For example, you can reach to C through A B and then C and then A D and C. What difference does that make? That doesn't make any difference but in some cases that does. Let us take an example of an automated electrician. There is a bulb which is not turning on and the… the… the algorithm is designed with a problem and possible alternatives to look for because there is a problem you should look for something and then again you look for something. When bulb not turning on there are a… there is possibility that current is absent, There's a wire problem, there's a socket problem. Now they find one more thing. Current is absent at intermediary that clearly means there is one of the reason for that current being absent at intermediate is that current is not present because of that. Now, there are two this thing. Parent for this current absent. One is something that bulb is not turning on the second one intermediary. 

Now, there are two indications about bulb not turning on two parents, does it make a difference? Yes, for an electrician you would choose that first because that is most probable. It does make a difference. Now that kind of a situation cannot be handled in A star because you don't do that. Once that is done the next slide talks about the case. In this case we need when there is a multiple parent, you need to make sure that those children will get a… they need to be explored before others. In fact, what you need to do is to add something called a priority. Multiple parents, every parent adds some justification and the total justification of every child is to be calculated it’s a [Indiscernible: 21:26] from G and H it’s not only G but G is also divided into two parts now based on the justification. Okay, if there are multiple parents the amount of justification increases and the G value increases as well and it is more optimal okay you can… When there are more that thing you can say that G value is decreased. Okay it is one minus total justification. You may take… take it up that way. So point is that particular node is more important for us to look at. We need other algorithm. A star cannot work so we need that that the algorithm is called agenda driven search and that agenda driven search usually deploys this. It picks up every task that is  to be done for the nodes. Remember we keep that unexplored nodes and explored nodes and store that G plus H dash value and pick up the one which is most optimal okay looking at the current situation.

Here also the task, it is called task in the agenda driven system, the task are listed priority wise and the top priority task is picked up and if there are multiple children we see if there are these children already have some other parents and if it is…total justification is calculated and based on that their priority is decided and inserted back again in the list and again the top priority thing is picked up. An example is like doctor. Doctor who picks up the most probable disease first. Why? Because when doctor looks at the patient it finds that there are few things patient looks weakened and also complains about fever and cold. So there are more than one indicators of malaria. So he would choose malaria first and also there are other indicators like season and the place where the person lives and all that. So, there are multiple parents which indicate that then that particular thing because the justification to that particular thing is very high and because it has to confirm that it is malaria. So what does it do? It… it picks up it generates the sub task called blood test and the blood test because the justification, the total justification is so high that when blood test is… is a new task it is inserted into the top because it is the highest priority job and then the doctor says that this is to be done. You’ll have to get the blood test done. 

There are other examples. For example, in a speech recognition or natural language understanding system, you looking at a statement and encountered a world called BANK bank. Now that bank maybe two, one of the two different things a river bank and a financial institute. So, you have okay. But then there is one more indication. It’s talking about money somewhere later then it is more likely. Now you have two parents. Now two parents are pointing to the financial institute, one parent is pointing to the river bank, obviously their justification to the… the financial institute is larger. So, in the speech recognition system or the natural language recognition system you’ll prefer that interpretation before the other. And same case with malaria which is shown on the next slide. Okay fever on alternate days and weakness both point to malaria while the viral infection and typhoid also possible when you have weakness. But then there are two parents pointing to malaria so we'll choose that first. 

One more example is… is organizing a conference. When you organize a conference you manage… there are a lot of children venue management and food arrangement and participation management. In that case, the first child which is inserted is called organizing a conference sub task venue management, food management, part… participation management and then in case of okay in inviting papers reviewing are…are part of Research Paper management and so on so forth. So, once you… you go through that, you may find a task which is also has something to do with the earlier. For example, booking a hall. Booking a hall requires you to figure out how… what will be the strength of the audience. For that you'll have to look at the venue… venue management obviously involves this but then participation management also involves this. So, you…you will have to find out what… how many participants are going to come and the venue management also requires the hall to be fixed. So, when you… when you find that there is a task which has multiple parents obviously that bubbles up to the top and it will be the highest priority job. So what you do is usually you pick up that job first and book your hall first.

Okay so that's how the agenda driven system is working. They also need, in fact there are few additional things required in agenda driven system. Every task is to be divided into sub task once in a while and every task again maybe sub task also further divided. Every task will add a justification when it generates the children and when you have a multiple parent, it makes a lot of sense in this case because that will add to the level of justification and improves the priority and agenda is always stored based on the priority. But then sometimes more than one indicators are not all that important. Some… for example… for example, if you… if you find that battery is weak and also light is not turning on for your car, then whenever this one thing happens, the other will surely happen. So, this two does not add significant justification. So, that is one thing. The second is sometimes there are two parents but one of them is very, very strong. For example, having a fever is one and blood report positive is the other. So blood report positive is a strong justification. 

So agenda driven system should consider that more important. So that justification value or the weight is much higher. One more thing in A star algorithm every solution is a single node. In some cases, it is not. One typical example is shown on the handout as well as the slide. We have a denial of service attack it is from the intrusion detection domain. That can be of two reasons. One is network protocol problem and a database server problem, that. For the database server problem, both primary and secondary database servers have to be down okay. So, if both of them are down there is a… there is a database server problem. So… so here if you draw this graph the arc CD and CE they are not independent arcs. They have to appear together for a solution. They, those are known as and arc which requires both the solutions to be true for the parent to be true. Unlike the case the parent case where A is true… if even if B is true or C is true, then A is true. Okay, that is called or arc while when D is true and C is true then C is true then it is called and arc. 

Whenever such a situation arises, this graph is known as and or graph. In unconventional A star we’ll not be in a position to handle it. Why? Because it assumes every… every branch to be an independent separate and a solution is assumed to be a single node. Here what we need is a different algorithm and that algorithm is known as problems reduction algorithm it’s basically nothing else but extension of A star algorithm which whenever there is an and target it considers that to be a single arc and G plus dash  of all solutions are added together to get the value of that particular branch. 

Okay we’ll not proceed with this further and and or you will find a lot of other discussion about and or graphs in literature. 

With that we’ll conclude this particular module. In this particular module we have seen A star how… how we can get admissible function for A star algorithm and we have also seen admissibility is not the only important criteria. The other criteria is also important. So, sometimes suboptimal functions are preferred over the optimal functions. We've also seen how agenda driven system works and also and or graphs and the problem reduction system which can handle those cases well. With that we’ll conclude. Thank you. 

